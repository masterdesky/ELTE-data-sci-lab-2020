* title slide *
Hello everyone! Let me have a very brief summary of my project. In this course I'm studying the Cosmic Microwave Background radiaton. In my project I'm ought to analyse the simulation aspect of it, as well as I'm processing real observational data of the CMB. My two main goals are to replicate the CMB temperature map using an arbitrary angular power spectrum, and to extract the power spectrum from real observational data. In the last week I mostly cleaned up and completely refractored almost all of my codes, I've written docstrings for almost all of my functions, reworked my figures and completed some extra tasks I set for myself. Today I would like to mostly summarize all the work I've done on this project by doing a "code tour" if I can call it like that.

*slide 1*
Okay let's begin. My code is segmented into three different parts. Two of them can be used to generate the well-known intensity map of the CMB temperature anisotropy, while the third one is a processing and visualization pipeline primarily for the CMB datasets of the Planck space observatory, but it can be also used for the maps of the WMAP telescope. The reason for this "portability" is that both Planck and WMAP uses the same HEALPix standard to index pixels on their maps and then store them as FITS files.

As I mentioned there are two different parts, which are related to the generation of CMB maps, but these two utilizes completely different methods. So what's the diffeference? The first method is very simple. It simply uses already fully implemented routines from HEALPix to generate an arbitrary CMB map from an input angular power spectrum. Easy case.
The second algorithm is much more difficult and long, but completely modular and much more instructive. Using that, you can really learn, how the CMB radiation is measured, what components it consists of and so on.

*slide 2*
Start with the easiest one that uses the HEALPix libary. In this case we have a singular input angular power spectrum, and at the end we're generating a random HEALPix array, in completely the same format, as eg. the Planck telescope stores their data. Then it can be then processed with my Planck data procession pipeline. This routine only consist of two main functions called load_spectrum() and gen_maps(). Their names try to be meaningful, load_spectrum() simply loads an angular spectrum from a file, while the gen_maps() function creates the randomized HEALPix array.

*slide 3*
Next I would like to speak about the procession pipeline of HEALPix data. Because the Planck CMB maps are stored as FITS tables, my routine first extracts a HEALPix array from a given field from an input FITS file. The temperature maps in Planck are stored as K values, so the load_HPX() function also converts them to micro K and returns this converted array. This is a specially indexed 1D array yet. Next the get_projection() interprets this array, and maps this on an arbitrary geographical projection. The output of this is a 2D matrix, which completely encompasses the non-rectangular projection itself, as some kind of border/container. Outside of the actual projection, the bad values are set to maybe -inf, I actually don't remember, but they're handled uniformly. And finally there is a function, which generates an image, completely similar to those well-known CMB images.

*slide 4*
Calculating and plotting the angular power spectrum is also part of this routine. First the function cmb_spectrum() calculates the Cl power spectrum corresponding to an input HEALPix array, using the method I detailed in the previous presentation. It uses the `synfast` routine from HEALPix calculate the power spectrum values itself, and optionally the a_lm coefficients in the formula of harmonic expansion of the CMB temperature anisotropy. And at last, its output is plotted and compared to the theoretical curve, generated my the LAMBDA CAMB tool, which I also showcased in my previous presentation and in my second report also.

*slide 5*
For last I would like to speak about the second generation method for CMB maps. As I mentioned this is much longer routine, than the previous two combined, so I won't detail or show the functions defined in it, just talk about them a bit. The main characteristics of this routine is, that it generates all components of a CMB map individually. You can see the main/important components enumerated on this slide. You can clearly understand from his code, how the various foreground effects, and instrumental noise affects the measured CMB maps. Of course, in real life foreground sources are so abundant, that they're compeletely obscure the true CMB radiation, while this code by default only shows them as small perturbations. The reason for this is simple, I obviously can't generate 100 billion objects with my PC, so maybe this part does not fully reflect the reality.
There is a downfall however using this algorithm. It can only generate rectangular maps without distortion. So it will be accurate only for small angles of view. But that's okay I think, since the other method is capable to generate full sky maps only, so they complement each other well.

On actual algorithm side, the generation is fully statistical. The input for the routine is a mandatory, but arbitrary angular power spectrum. First the routine generates some gaussian map in Fourier space using this spectrum, then converts it to Image space. With the right parameters this will look like an a small slice of a pure CMB temperature map. Then all other effects are generated by sampling them with predefined parameters from Poisson or exponential distribution. Sunyaev-Zeldovich sources are smeared/blurred with a beta function and so on. All my codes and documentation are available and organized on GitHub. It still requires some work, but they're approximately 92% done.

*slide 6*
On the last slides I would like to show you some output images. This is the output from the first generation method, using HEALPix. The parameters for this image can be further tweaked to make a more finely granular structure, but this one in particular looked very similar to the true CMB anisotropy map, so I thought I would show you this one.

Thank you for your attention!